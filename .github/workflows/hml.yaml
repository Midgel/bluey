name: CI/CD-bluey

on:
  push:
    branches:
      - hml

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # Etapa 1: Faz o 'checkout' do seu código do GitHub para o ambiente do runner
      - name: Checkout do código
        uses: actions/checkout@v4

      # Etapa 2: Configura as credenciais da AWS usando as secrets do GitHub
      - name: Configurar as credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Etapa 3: Autentica o Docker no repositório ECR da AWS
      - name: Login no ECR da AWS
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 706643784645.dkr.ecr.us-east-2.amazonaws.com

      # Etapa 4: Constrói a imagem Docker
      - name: Construir e taguear a imagem Docker
        run: |
          docker build -f Dockerfile.laravel -t laravel-app:latest .
          docker build -f Dockerfile.nginx -t nginx-proxy:latest .
        
      # Etapa 5: Tagueia a imagem Docker  
      - name: Tagear imagem
        run: |
          docker tag laravel-app:latest 706643784645.dkr.ecr.us-east-2.amazonaws.com/laravel-app:latest
          docker tag nginx-proxy:latest 706643784645.dkr.ecr.us-east-2.amazonaws.com/nginx-proxy:latest

      # Etapa 6: Envia a imagem construída para o ECR
      - name: Enviar a imagem Docker para o ECR
        run: |
            docker push 706643784645.dkr.ecr.us-east-2.amazonaws.com/laravel-app:latest
            docker push 706643784645.dkr.ecr.us-east-2.amazonaws.com/nginx-proxy:latest


      # Etapa 7 Atualiza o serviço do ECS para usar a nova imagem
      - name: Atualizar o serviço do ECS
        run: |
          aws ecs update-service --cluster bluey-cluster --service bluey-servicve --force-new-deployment
